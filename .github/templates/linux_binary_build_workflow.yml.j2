{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/linux_binary_build_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
  pull_request:
    types: [opened, synchronize, reopened, !{{ ciflow_config.trigger_action }}]

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
  workflow_dispatch:

env:
  PYTORCH_BUILD_NUMBER: 1
  SKIP_ALL_TESTS: 1
  PYTORCH_ROOT: /pytorch
  BUILD_ENVIRONMENT: !{{ build_environment }}
  IN_CI: 1
  IS_GHA: 1
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
  PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_DEFAULT_REGION: us-east-1
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
  PYTORCH_RETRY_TEST_CASES: 1
  USE_GLOO_WITH_OPENSSL: ON
  # Needed for conda builds
  TORCH_CONDA_BUILD_FOLDER: pytorch-nightly
  ANACONDA_USER: pytorch
!{{ common.concurrency(build_environment) }}

jobs:
{% block generate_build_matrix +%}
  generate-build-matrix:
    if: !{{ ciflow_config.root_job_condition }}
    runs-on: ubuntu-18.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    container:
      image: python:3.9
    steps:
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
      - name: Generating build matrix
        id: set-matrix
        run: |
          # outputting for debugging purposes
          MATRIX=$(python .github/scripts/generate_binary_build_matrix.py !{{ package_type }})
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"
{%- endblock %}
{% block build +%}
  build:
{%- if package_type == "libtorch" %}
    name: pytorch-linux-!{{ package_type }}-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}-${{ matrix.devtoolset }}-${{ matrix.libtorch_variant }}
{%- else %}
    name: pytorch-linux-!{{ package_type }}-py${{ matrix.python_version }}-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}
{%- endif %}
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: linux.4xlarge
    timeout-minutes: !{{ common.timeout_minutes }}
    needs: generate-build-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}
      fail-fast: false
    env:
      DESIRED_PYTHON: ${{ matrix.python_version }}
      # TODO: This is a legacy variable that we eventually want to get rid of in
      #       favor of GPU_ARCH_VERSION
      DESIRED_CUDA: ${{ matrix.gpu_arch_version }}
      GPU_ARCH_VERSION: ${{ matrix.gpu_arch_version }}
      GPU_ARCH_TYPE: ${{ matrix.gpu_arch_type }}
      DOCKER_IMAGE: ${{ matrix.container_image }}
      PYTORCH_BUILD_NUMBER: 1
      SKIP_ALL_TESTS: 1
{%- if package_type == "libtorch" %}
      LIBTORCH_VARIANT: ${{ matrix.libtorch_variant }}
      DESIRED_DEVTOOLSET: ${{ matrix.devtoolset }}
{%- endif %}
    steps:
      !{{ common.setup_ec2_linux() }}
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
        with:
          path: pytorch
          submodules: recursive
      - name: Clone pytorch/builder
        uses: actions/checkout@v2
        with:
          repository: pytorch/builder
          path: builder
      - name: Generate version string
        working-directory: pytorch/
        run: |
          version=$(.github/scripts/generate_pytorch_version.py)
          echo "Generated version: ${version}"
          echo "PYTORCH_BUILD_VERSION=${version}" >> "$GITHUB_ENV"
      - name: Set BUILD_SPLIT_CUDA
        if: ${{ matrix.gpu_arch_type == 'cuda' && startsWith(matrix.gpu_arch_version, '11') }}
        run: |
          echo "BUILD_SPLIT_CUDA='ON'" >> "$GITHUB_ENV"
      - name: Build PyTorch binary
        run: |
          mkdir -p artifacts/
          container_name=$(docker run \
            -e BUILD_ENVIRONMENT \
            -e PYTORCH_FINAL_PACKAGE_DIR=/artifacts \
            -e BUILD_SPLIT_CUDA \
            -e DESIRED_PYTHON \
            -e DESIRED_CUDA \
            -e GPU_ARCH_VERSION \
            -e GPU_ARCH_TYPE \
            -e USE_GLOO_WITH_OPENSSL \
            -e TORCH_CONDA_BUILD_FOLDER \
            -e ANACONDA_USER \
            -e PYTORCH_BUILD_VERSION \
            -e PYTORCH_BUILD_NUMBER \
            -e PYTORCH_ROOT \
            -e SKIP_ALL_TESTS \
            -e LIBTORCH_VARIANT \
            -e DESIRED_DEVTOOLSET \
            --tty \
            --detach \
            -v "${GITHUB_WORKSPACE}/pytorch:/pytorch" \
            -v "${GITHUB_WORKSPACE}/builder:/builder" \
            -v "${GITHUB_WORKSPACE}/artifacts:/artifacts" \
            -w / \
            "${DOCKER_IMAGE}"
          )
          docker exec -t "${container_name}" sh -c "bash /builder/!{{ package_type }}/build.sh"
      - uses: !{{ common.upload_artifact_s3_action }}
        with:
{%- if package_type == "libtorch" %}
          name: pytorch-linux-!{{ package_type }}-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}-${{ matrix.devtoolset }}-${{ matrix.libtorch_variant }}
{%- else %}
          name: pytorch-linux-!{{ package_type }}-py${{ matrix.python_version }}-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}
{%- endif %}
          retention-days: 14
          if-no-files-found: error
          path:
            artifacts/*
      - name: Parse ref
        id: parse-ref
        working-directory: pytorch/
        run: |
          .github/scripts/parse_ref.py
      - name: Display and upload binary build size statistics (Click Me)
        env:
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: '${{ github.run_id }}_${{ github.run_number }}'
        working-directory: pytorch/
        run: |
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          pip3 install requests==2.26
          python3 -m tools.stats.upload_binary_size_to_scuba || exit 0
      !{{ common.teardown_ec2_linux("pytorch/") }}
{%- endblock %}
